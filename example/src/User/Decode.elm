module User.Decode exposing (..)

{-| Generated by elm-json-interop.
-}

import Json.Decode as D exposing (Decoder)
import User.User as A
import Utils.Json.Decode_ as D_


user : Decoder A.User
user =
    D.field "_" D.int
        |> D.andThen
            (\i___ ->
                case i___ of
                    0 ->
                        D.map2 A.Regular (D.field "a" D.string) (D.field "b" D.int)

                    1 ->
                        D.map A.Visitor (D.field "a" D.string)

                    2 ->
                        D.succeed A.Anonymous

                    _ ->
                        D.fail ("I can't decode " ++ "User" ++ ", unknown variant with index " ++ String.fromInt i___ ++ ".")
            )
