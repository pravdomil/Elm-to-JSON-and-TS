module Generators.Decode exposing (fromFile)

import Elm.Syntax.Declaration exposing (Declaration(..))
import Elm.Syntax.Exposing exposing (Exposing(..), TopLevelExpose(..))
import Elm.Syntax.Expression exposing (Expression(..), FunctionImplementation)
import Elm.Syntax.File exposing (File)
import Elm.Syntax.Import exposing (Import)
import Elm.Syntax.Module as Module exposing (Module(..))
import Elm.Syntax.ModuleName exposing (ModuleName)
import Elm.Syntax.Node as Node exposing (Node(..))
import Elm.Syntax.Pattern exposing (Pattern(..))
import Elm.Syntax.Range as Range
import Elm.Syntax.Signature exposing (Signature)
import Elm.Syntax.TypeAlias exposing (TypeAlias)
import Elm.Syntax.TypeAnnotation exposing (TypeAnnotation(..))
import Elm.Writer as Writer
import Utils.Function as Function


fromFile : File -> String
fromFile a =
    let
        suffix : String
        suffix =
            "Decode"

        name : ModuleName
        name =
            a.moduleDefinition |> Node.value |> Module.moduleName

        module_ : Node Module
        module_ =
            NormalModule
                { moduleName = n (name ++ [ suffix ])
                , exposingList = n (All Range.emptyRange)
                }
                |> n

        imports : List (Node Import)
        imports =
            additionalImports name

        declarations : List (Node Declaration)
        declarations =
            a.declarations |> List.filterMap fromDeclaration
    in
    { a
        | moduleDefinition = module_
        , imports = imports
        , declarations = declarations
    }
        |> Writer.writeFile
        |> Writer.write
        |> String.lines
        |> (\v ->
                List.take 1 v ++ [ "{-| Generated by elm-json-interop.\n-}" ] ++ List.drop 1 v
           )
        |> String.join "\n"


additionalImports : ModuleName -> List (Node Import)
additionalImports a =
    let
        import_ : ModuleName -> String -> Import
        import_ b c =
            Import (n b) (Just (n [ c ])) Nothing

        importExposingType : ModuleName -> String -> String -> Import
        importExposingType b c d =
            Import (n b) (Just (n [ c ])) (Just (n (Explicit [ n (TypeOrAliasExpose d) ])))
    in
    [ Import (n a) Nothing (Just (n (All Range.emptyRange)))
    , importExposingType [ "Json", "Decode" ] "D" "Decoder"
    , import_ [ "Utils", "Json", "Decode_" ] "D_"
    ]
        |> List.map n


fromDeclaration : Node Declaration -> Maybe (Node Declaration)
fromDeclaration a =
    case a |> Node.value of
        FunctionDeclaration _ ->
            Nothing

        AliasDeclaration b ->
            Just (fromTypeAlias b)

        CustomTypeDeclaration _ ->
            Nothing

        PortDeclaration _ ->
            Nothing

        InfixDeclaration _ ->
            Nothing

        Destructuring _ _ ->
            Nothing


fromTypeAlias : TypeAlias -> Node Declaration
fromTypeAlias a =
    let
        fnName : Node String
        fnName =
            a.name |> Node.map Function.nameFromString

        signature : Maybe (Node Signature)
        signature =
            let
                arguments : List (Node TypeAnnotation)
                arguments =
                    []
                        ++ (a.generics
                                |> List.map
                                    (\v ->
                                        typed "Decoder" [ Node.map GenericType v ]
                                    )
                           )
                        ++ [ typed
                                "Decoder"
                                [ typed (Node.value a.name) (a.generics |> List.map (Node.map GenericType))
                                ]
                           ]
            in
            Just (n (Signature fnName (arguments |> toFunctionTypeAnnotation)))

        typed : String -> List (Node TypeAnnotation) -> Node TypeAnnotation
        typed b c =
            n (Typed (n ( [], b )) c)
    in
    FunctionDeclaration
        { documentation = Nothing
        , signature = signature
        , declaration =
            { name = fnName
            , arguments = a.generics |> List.map (Node.map VarPattern)
            , expression = a.typeAnnotation |> fromTypeAnnotation
            }
                |> n
        }
        |> n


fromTypeAnnotation : Node TypeAnnotation -> Node Expression
fromTypeAnnotation a =
    a
        |> Node.map
            (\v ->
                case v of
                    GenericType b ->
                        FunctionOrValue [] b

                    Typed b c ->
                        fromTyped b c

                    Unit ->
                        FunctionOrValue [ "D_" ] "unit"

                    Tupled b ->
                        fromTuple b

                    Record _ ->
                        UnitExpr

                    GenericRecord _ _ ->
                        -- https://www.reddit.com/r/elm/comments/atitkl/using_extensible_record_with_json_decoder/
                        Application
                            [ n (FunctionOrValue [ "Debug" ] "todo")
                            , n (Literal "I don't know how to decode extensible record.")
                            ]

                    FunctionTypeAnnotation _ _ ->
                        Application
                            [ n (FunctionOrValue [ "Debug" ] "todo")
                            , n (Literal "I don't know how to decode function.")
                            ]
            )


fromTyped : Node ( ModuleName, String ) -> List (Node TypeAnnotation) -> Expression
fromTyped b a =
    let
        toExpression : ( ModuleName, String ) -> Expression
        toExpression ( module_, name ) =
            case ( module_, name ) of
                ( [], "Bool" ) ->
                    FunctionOrValue [ "D" ] "bool"

                ( [], "Int" ) ->
                    FunctionOrValue [ "D" ] "int"

                ( [], "Float" ) ->
                    FunctionOrValue [ "D" ] "float"

                ( [], "Char" ) ->
                    FunctionOrValue [ "D_" ] "char"

                ( [], "String" ) ->
                    FunctionOrValue [ "D" ] "string"

                ( [], "List" ) ->
                    FunctionOrValue [ "D" ] "list"

                ( [], "Array" ) ->
                    FunctionOrValue [ "D" ] "array"

                ( [], "Maybe" ) ->
                    FunctionOrValue [ "D_" ] "maybe"

                ( [], "Result" ) ->
                    FunctionOrValue [ "D_" ] "result"

                ( [], "Set" ) ->
                    FunctionOrValue [ "D_" ] "set"

                ( [], "Dict" ) ->
                    FunctionOrValue [ "D_" ] "dict"

                ( [ "Encode" ], "Value" ) ->
                    FunctionOrValue [ "D" ] "value"

                ( [ "Decode" ], "Value" ) ->
                    FunctionOrValue [ "D" ] "value"

                _ ->
                    FunctionOrValue module_ (Function.nameFromString name)
    in
    Application (Node.map toExpression b :: List.map fromTypeAnnotation a)


fromTuple : List (Node TypeAnnotation) -> Expression
fromTuple a =
    let
        fn : Node Expression
        fn =
            (if a |> List.length |> (==) 2 then
                FunctionOrValue [ "D_" ] "tuple"

             else
                FunctionOrValue [ "D_" ] "tuple3"
            )
                |> n
    in
    Application (fn :: List.map fromTypeAnnotation a)



--


toFunctionTypeAnnotation : List (Node TypeAnnotation) -> Node TypeAnnotation
toFunctionTypeAnnotation a =
    let
        helper : List (Node TypeAnnotation) -> Node TypeAnnotation -> Node TypeAnnotation
        helper b c =
            b |> List.foldl (\v acc -> FunctionTypeAnnotation v acc |> n) c
    in
    case a |> List.reverse of
        [] ->
            n Unit

        b :: [] ->
            b

        b :: c :: rest ->
            FunctionTypeAnnotation c b |> n |> helper rest


n : a -> Node a
n =
    Node Range.emptyRange
