module Generators.Encode exposing (fromFile)

import Elm.Syntax.Declaration exposing (Declaration(..))
import Elm.Syntax.Exposing exposing (Exposing(..), TopLevelExpose(..))
import Elm.Syntax.File exposing (File)
import Elm.Syntax.Import exposing (Import)
import Elm.Syntax.Module as Module exposing (Module(..))
import Elm.Syntax.ModuleName exposing (ModuleName)
import Elm.Syntax.Node as Node exposing (Node(..))
import Elm.Syntax.Pattern exposing (Pattern(..))
import Elm.Syntax.Range as Range
import Elm.Syntax.TypeAlias exposing (TypeAlias)
import Elm.Writer as Writer
import Generators.Dependencies as Dependencies
import Utils.Function as Function


fromFile : File -> String
fromFile a =
    let
        name : ModuleName
        name =
            a.moduleDefinition |> Node.value |> Module.moduleName

        module_ : Node Module
        module_ =
            NormalModule
                { moduleName = n (name ++ [ "Encode" ])
                , exposingList = n (All Range.emptyRange)
                }
                |> n

        imports : List (Node Import)
        imports =
            declarations
                |> List.concatMap Dependencies.fromDeclaration
                |> List.filterMap
                    (\( v, _ ) ->
                        if v == [] || v == [ "E" ] || v == [ "E_" ] then
                            Nothing

                        else
                            Just (n (Import (n v) Nothing Nothing))
                    )
                |> (++) (additionalImports name)

        declarations : List (Node Declaration)
        declarations =
            a.declarations |> List.filterMap fromDeclaration
    in
    { a
        | moduleDefinition = module_
        , imports = imports
        , declarations = declarations
    }
        |> Writer.writeFile
        |> Writer.write
        |> String.lines
        |> (\v ->
                List.take 1 v ++ [ "{-| Generated by elm-json-interop.\n-}" ] ++ List.drop 1 v
           )
        |> String.join "\n"


additionalImports : ModuleName -> List (Node Import)
additionalImports a =
    [ Import (n a) Nothing (Just (n (All Range.emptyRange)))
    , Import (n [ "Json", "Encode" ]) (Just (n [ "E" ])) Nothing
    , Import (n [ "Utils", "Json", "Encode_" ]) (Just (n [ "E_" ])) (Just (n (Explicit [ n (TypeOrAliasExpose "Encoder") ])))
    ]
        |> List.map n
