module Id.Decode exposing (..)

{-| Generated by elm-json-interop.
-}

import Id as A
import Json.Decode as D exposing (Decoder)
import Utils.Json.Decode_ as D_


id : Decoder A.Id
id =
    D.field "_" D.int
        |> D.andThen
            (\i___ ->
                case i___ of
                    0 ->
                        D.map A.Id (D.field "a" D.string)

                    _ ->
                        D.fail ("I can't decode " ++ "Id" ++ ", unknown variant with index " ++ String.fromInt i___ ++ ".")
            )
