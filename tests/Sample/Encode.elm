module Sample.Encode exposing (..)

{-| Generated by elm-json-interop.
-}

import Json.Encode as E
import Sample as A
import Sample2.Encode as Sample2 exposing (sampleType)
import Utils.Json.Encode_ as E_


type0 : A.Type0 -> E.Value
type0 a =
    case a of
        A.Type0 ->
            E.object [ ( "_", E.int 0 ) ]


type1 : A.Type1 -> E.Value
type1 a =
    case a of
        A.Type1 b ->
            E.object [ ( "_", E.int 0 ), ( "a", E.string b ) ]


type2 : A.Type2 -> E.Value
type2 a =
    case a of
        A.Type2 b c ->
            E.object [ ( "_", E.int 0 ), ( "a", E.string b ), ( "b", E.string c ) ]


type10 : A.Type10 -> E.Value
type10 a =
    case a of
        A.Type10 b c d e f g h i j k ->
            E.object [ ( "_", E.int 0 ), ( "a", E.string b ), ( "b", E.string c ), ( "c", E.string d ), ( "d", E.string e ), ( "e", E.string f ), ( "f", E.string g ), ( "g", E.string h ), ( "h", E.string i ), ( "i", E.string j ), ( "j", E.string k ) ]


record0 : A.Record0 -> E.Value
record0 a =
    E.object []


record1 : A.Record1 -> E.Value
record1 a =
    E.object [ ( "a", E.string a.a ) ]


record2 : A.Record2 -> E.Value
record2 a =
    E.object [ ( "a", E.string a.a ), ( "b", E.string a.b ) ]


record10 : A.Record10 -> E.Value
record10 a =
    E.object [ ( "a", E.string a.a ), ( "b", E.string a.b ), ( "c", E.string a.c ), ( "d", E.string a.d ), ( "e", E.string a.e ), ( "f", E.string a.f ), ( "g", E.string a.g ), ( "h", E.string a.h ), ( "i", E.string a.i ), ( "j", E.string a.j ) ]


typeQualified : A.TypeQualified -> E.Value
typeQualified a =
    Sample2.sampleType a


typeUnqualified : A.TypeUnqualified -> E.Value
typeUnqualified a =
    sampleType a


sample encodeA encodeB encodeC a =
    E.object [ ( "unit", E_.unit a.unit ), ( "bool", E.bool a.bool ), ( "int", E.int a.int ), ( "float", E.float a.float ), ( "char", E_.char a.char ), ( "string", E.string a.string ), ( "list", E.list (\a_list_ -> encodeA a_list_) a.list ), ( "array", E.array (\a_array_ -> encodeA a_array_) a.array ), ( "maybe", E_.maybe (\a_maybe_ -> encodeA a_maybe_) a.maybe ), ( "result", E_.result (\a_result_ -> encodeA a_result_) (\a_result_ -> encodeB a_result_) a.result ), ( "set", E.set (\a_set_ -> encodeA a_set_) a.set ), ( "dict", E_.dict (\a_dict_ -> encodeA a_dict_) (\a_dict_ -> encodeB a_dict_) a.dict ), ( "tuple", E_.tuple (\a_tuple_ -> encodeA a_tuple_) (\a_tuple_ -> encodeB a_tuple_) a.tuple ), ( "tuple3", E_.tuple3 (\a_tuple3_ -> encodeA a_tuple3_) (\a_tuple3_ -> encodeB a_tuple3_) (\a_tuple3_ -> encodeC a_tuple3_) a.tuple3 ), ( "record", E.object [] ) ]
